---
# Source: cortex/templates/distributor/distributor-poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: cortex-distributor
  namespace: cortex-components
  labels:
    helm.sh/chart: cortex-2.4.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/version: "v1.17.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: distributor
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: cortex
      app.kubernetes.io/instance: cortex
      app.kubernetes.io/component: distributor
  maxUnavailable: 1
---
# Source: cortex/templates/ingester/ingester-poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: cortex-ingester
  namespace: cortex-components
  labels:
    helm.sh/chart: cortex-2.4.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/version: "v1.17.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: ingester
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: cortex
      app.kubernetes.io/instance: cortex
      app.kubernetes.io/component: ingester
  maxUnavailable: 1
---
# Source: cortex/templates/nginx/nginx-poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: cortex-nginx
  namespace: cortex-components
  labels:
    helm.sh/chart: cortex-2.4.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/version: "v1.17.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: nginx
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: cortex
      app.kubernetes.io/instance: cortex
      app.kubernetes.io/component: nginx
  maxUnavailable: 1
---
# Source: cortex/templates/querier/querier-poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: cortex-querier
  namespace: cortex-components
  labels:
    helm.sh/chart: cortex-2.4.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/version: "v1.17.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: querier
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: cortex
      app.kubernetes.io/instance: cortex
      app.kubernetes.io/component: querier
  maxUnavailable: 1
---
# Source: cortex/templates/query-frontend/query-poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: cortex-query-frontend
  namespace: cortex-components
  labels:
    helm.sh/chart: cortex-2.4.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/version: "v1.17.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: query-frontend
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: cortex
      app.kubernetes.io/instance: cortex
      app.kubernetes.io/component: query-frontend
  maxUnavailable: 1
---
# Source: cortex/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cortex
  namespace: cortex-components
  labels:
    helm.sh/chart: cortex-2.4.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/version: "v1.17.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
automountServiceAccountToken: true
---
# Source: cortex/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cortex
  namespace: cortex-components
  labels:
    helm.sh/chart: cortex-2.4.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/version: "v1.17.1"
    app.kubernetes.io/managed-by: Helm
data:
  cortex.yaml: YWxlcnRtYW5hZ2VyOgogIGNsdXN0ZXI6CiAgICBsaXN0ZW5fYWRkcmVzczogMC4wLjAuMDo5MDk0CiAgZW5hYmxlX2FwaTogZmFsc2UKICBleHRlcm5hbF91cmw6IC9hcGkvcHJvbS9hbGVydG1hbmFnZXIKYXBpOgogIHByb21ldGhldXNfaHR0cF9wcmVmaXg6IC9wcm9tZXRoZXVzCiAgcmVzcG9uc2VfY29tcHJlc3Npb25fZW5hYmxlZDogdHJ1ZQphdXRoX2VuYWJsZWQ6IGZhbHNlCmJsb2Nrc19zdG9yYWdlOgogIGJ1Y2tldF9zdG9yZToKICAgIGJ1Y2tldF9pbmRleDoKICAgICAgZW5hYmxlZDogdHJ1ZQogICAgc3luY19kaXI6IC9kYXRhL3RzZGItc3luYwogIHRzZGI6CiAgICBkaXI6IC9kYXRhL3RzZGIKZGlzdHJpYnV0b3I6CiAgcG9vbDoKICAgIGhlYWx0aF9jaGVja19pbmdlc3RlcnM6IHRydWUKICBzaGFyZF9ieV9hbGxfbGFiZWxzOiB0cnVlCmZyb250ZW5kOgogIGxvZ19xdWVyaWVzX2xvbmdlcl90aGFuOiAxMHMKaW5nZXN0ZXI6CiAgbGlmZWN5Y2xlcjoKICAgIGZpbmFsX3NsZWVwOiAzMHMKICAgIGpvaW5fYWZ0ZXI6IDEwcwogICAgbnVtX3Rva2VuczogNTEyCiAgICBvYnNlcnZlX3BlcmlvZDogMTBzCiAgICByaW5nOgogICAgICBrdnN0b3JlOgogICAgICAgIHN0b3JlOiBtZW1iZXJsaXN0CiAgICAgIHJlcGxpY2F0aW9uX2ZhY3RvcjogMwppbmdlc3Rlcl9jbGllbnQ6CiAgZ3JwY19jbGllbnRfY29uZmlnOgogICAgbWF4X3JlY3ZfbXNnX3NpemU6IDEwNDg1NzYwCiAgICBtYXhfc2VuZF9tc2dfc2l6ZTogMTA0ODU3NjAKbGltaXRzOgogIGVuZm9yY2VfbWV0cmljX25hbWU6IHRydWUKICBtYXhfcXVlcnlfbG9va2JhY2s6IDBzCiAgcmVqZWN0X29sZF9zYW1wbGVzOiB0cnVlCiAgcmVqZWN0X29sZF9zYW1wbGVzX21heF9hZ2U6IDE2OGgKbWVtYmVybGlzdDoKICBiaW5kX3BvcnQ6IDc5NDYKICBqb2luX21lbWJlcnM6CiAgLSAnY29ydGV4LW1lbWJlcmxpc3QnCnF1ZXJpZXI6CiAgYWN0aXZlX3F1ZXJ5X3RyYWNrZXJfZGlyOiAvZGF0YS9hY3RpdmUtcXVlcnktdHJhY2tlcgogIHN0b3JlX2dhdGV3YXlfYWRkcmVzc2VzOiB8LQogICAgZG5zK2NvcnRleC1zdG9yZS1nYXRld2F5LWhlYWRsZXNzOjkwOTUKcXVlcnlfcmFuZ2U6CiAgYWxpZ25fcXVlcmllc193aXRoX3N0ZXA6IHRydWUKICBjYWNoZV9yZXN1bHRzOiB0cnVlCiAgcmVzdWx0c19jYWNoZToKICAgIGNhY2hlOgogICAgICBtZW1jYWNoZWQ6CiAgICAgICAgZXhwaXJhdGlvbjogMWgKICAgICAgbWVtY2FjaGVkX2NsaWVudDoKICAgICAgICB0aW1lb3V0OiAxcwogIHNwbGl0X3F1ZXJpZXNfYnlfaW50ZXJ2YWw6IDI0aApydWxlcjoKICBlbmFibGVfYWxlcnRtYW5hZ2VyX2Rpc2NvdmVyeTogZmFsc2UKICBlbmFibGVfYXBpOiB0cnVlCnJ1bnRpbWVfY29uZmlnOgogIGZpbGU6IC9ldGMvY29ydGV4LXJ1bnRpbWUtY29uZmlnL3J1bnRpbWVfY29uZmlnLnlhbWwKc2VydmVyOgogIGdycGNfbGlzdGVuX3BvcnQ6IDkwOTUKICBncnBjX3NlcnZlcl9tYXhfY29uY3VycmVudF9zdHJlYW1zOiAxMDAwMAogIGdycGNfc2VydmVyX21heF9yZWN2X21zZ19zaXplOiAxMDQ4NTc2MAogIGdycGNfc2VydmVyX21heF9zZW5kX21zZ19zaXplOiAxMDQ4NTc2MAogIGh0dHBfbGlzdGVuX3BvcnQ6IDgwODAKc3RvcmVfZ2F0ZXdheToKICBzaGFyZGluZ19lbmFibGVkOiBmYWxzZQ==
---
# Source: cortex/templates/nginx/nginx-config.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: cortex-nginx
  namespace: cortex-components
  labels:
    helm.sh/chart: cortex-2.4.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/version: "v1.17.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: nginx
data:
  nginx.conf: |-
    worker_processes  5;  ## Default: 1
    error_log  /dev/stderr;
    pid        /tmp/nginx.pid;
    worker_rlimit_nofile 8192;

    events {
      worker_connections  4096;  ## Default: 1024
    }

    http {
      default_type application/octet-stream;
      client_max_body_size 1M;
      log_format   main '$remote_addr - $remote_user [$time_local]  $status '
        '"$request" $body_bytes_sent "$http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for" $http_x_scope_orgid';
      access_log   /dev/stderr  main;

      sendfile     on;
      tcp_nopush   on;
      resolver kube-dns.kube-system.svc.cluster.local valid=15s;

      server { # simple reverse-proxy
        listen 80;
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        proxy_http_version 1.1;

        

        location = /healthz {
          # auth_basic off is not set here, even when a basic auth directive is
          # included in the server block, as Nginx's NGX_HTTP_REWRITE_PHASE
          # (point when this return statement is evaluated) comes before the
          # NGX_HTTP_ACCESS_PHASE (point when basic auth is evaluated). Thus,
          # this return statement returns a response before basic auth is
          # evaluated.
          return 200 'alive';
        }

        # Distributor Config
        location = /ring {
          proxy_pass      http://cortex-distributor.cortex-components.svc.cluster.local:8080$request_uri;
        }

        location = /all_user_stats {
          proxy_pass      http://cortex-distributor.cortex-components.svc.cluster.local:8080$request_uri;
        }

        location = /api/prom/push {
          proxy_pass      http://cortex-distributor.cortex-components.svc.cluster.local:8080$request_uri;
        }

        ## New Remote write API. Ref: https://cortexmetrics.io/docs/api/#remote-write
        location = /api/v1/push {
          proxy_pass      http://cortex-distributor.cortex-components.svc.cluster.local:8080$request_uri;
        }

        # Alertmanager Config
        location ~ /api/prom/alertmanager/.* {
          proxy_pass      http://cortex-alertmanager.cortex-components.svc.cluster.local:8080$request_uri;
        }

        location ~ /api/v1/alerts {
          proxy_pass      http://cortex-alertmanager.cortex-components.svc.cluster.local:8080$request_uri;
        }

        location ~ /multitenant_alertmanager/status {
          proxy_pass      http://cortex-alertmanager.cortex-components.svc.cluster.local:8080$request_uri;
        }

        location = /api/prom/api/v1/alerts {
          proxy_pass      http://cortex-alertmanager.cortex-components.svc.cluster.local:8080/api/v1/alerts;
        }

        # Ruler Config
        location ~ /api/v1/rules {
          proxy_pass      http://cortex-ruler.cortex-components.svc.cluster.local:8080$request_uri;
        }

        location ~ /ruler/ring {
          proxy_pass      http://cortex-ruler.cortex-components.svc.cluster.local:8080$request_uri;
        }

        location ~ /api/prom/rules {
          proxy_pass      http://cortex-ruler.cortex-components.svc.cluster.local:8080$request_uri;
        }

        # Query Config
        location ~ /api/prom/.* {
          proxy_pass      http://cortex-query-frontend.cortex-components.svc.cluster.local:8080$request_uri;
        }

        ## New Query frontend APIs as per https://cortexmetrics.io/docs/api/#querier--query-frontend
        location ~ ^/prometheus/api/v1/(read|metadata|labels|series|query_range|query) {
          proxy_pass      http://cortex-query-frontend.cortex-components.svc.cluster.local:8080$request_uri;
        }

        location ~ /prometheus/api/v1/label/.* {
          proxy_pass      http://cortex-query-frontend.cortex-components.svc.cluster.local:8080$request_uri;
        }
      }
    }
---
# Source: cortex/templates/runtime-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cortex-runtime-config
  namespace: cortex-components
  labels:
    helm.sh/chart: cortex-2.4.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/version: "v1.17.1"
    app.kubernetes.io/managed-by: Helm
data:
  runtime_config.yaml: |
    {}
---
# Source: cortex/templates/alertmanager/alertmanager-svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: cortex-alertmanager-headless
  namespace: cortex-components
  labels:
    helm.sh/chart: cortex-2.4.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/version: "v1.17.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: alertmanager
  annotations:
    {}
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
    - port: 9094
      protocol: UDP
      name: alert-clu-udp
      targetPort: alert-clu-udp
    - port: 9094
      protocol: TCP
      name: alert-clu-tcp
      targetPort: alert-clu-tcp
  selector:
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/component: alertmanager
---
# Source: cortex/templates/alertmanager/alertmanager-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: cortex-alertmanager
  namespace: cortex-components
  labels:
    helm.sh/chart: cortex-2.4.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/version: "v1.17.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: alertmanager
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/component: alertmanager
---
# Source: cortex/templates/compactor/compactor-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: cortex-compactor
  namespace: cortex-components
  labels:
    helm.sh/chart: cortex-2.4.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/version: "v1.17.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: compactor
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/component: compactor
---
# Source: cortex/templates/distributor/distributor-svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: cortex-distributor-headless
  namespace: cortex-components
  labels:
    helm.sh/chart: cortex-2.4.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/version: "v1.17.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: distributor
  annotations:
    {}
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/component: distributor
---
# Source: cortex/templates/distributor/distributor-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: cortex-distributor
  namespace: cortex-components
  labels:
    helm.sh/chart: cortex-2.4.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/version: "v1.17.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: distributor
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/component: distributor
---
# Source: cortex/templates/ingester/ingester-svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: cortex-ingester-headless
  namespace: cortex-components
  labels:
    helm.sh/chart: cortex-2.4.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/version: "v1.17.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: ingester
  annotations:
    {}
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/component: ingester
---
# Source: cortex/templates/ingester/ingester-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: cortex-ingester
  namespace: cortex-components
  labels:
    helm.sh/chart: cortex-2.4.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/version: "v1.17.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: ingester
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/component: ingester
---
# Source: cortex/templates/nginx/nginx-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: cortex-nginx
  namespace: cortex-components
  labels:
    helm.sh/chart: cortex-2.4.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/version: "v1.17.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: nginx
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 80
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/component: nginx
---
# Source: cortex/templates/querier/querier-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: cortex-querier
  namespace: cortex-components
  labels:
    helm.sh/chart: cortex-2.4.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/version: "v1.17.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: querier
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/component: querier
---
# Source: cortex/templates/query-frontend/query-frontend-svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: cortex-query-frontend-headless
  namespace: cortex-components
  labels:
    helm.sh/chart: cortex-2.4.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/version: "v1.17.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: query-frontend
  annotations:
    {}
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/component: query-frontend
---
# Source: cortex/templates/query-frontend/query-frontend-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: cortex-query-frontend
  namespace: cortex-components
  labels:
    helm.sh/chart: cortex-2.4.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/version: "v1.17.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: query-frontend
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/component: query-frontend
---
# Source: cortex/templates/ruler/ruler-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: cortex-ruler
  namespace: cortex-components
  labels:
    helm.sh/chart: cortex-2.4.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/version: "v1.17.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: ruler
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/component: ruler
---
# Source: cortex/templates/store-gateway/store-gateway-svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: cortex-store-gateway-headless
  namespace: cortex-components
  labels:
    helm.sh/chart: cortex-2.4.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/version: "v1.17.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: store-gateway
  annotations:
    {}
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/component: store-gateway
---
# Source: cortex/templates/store-gateway/store-gateway-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: cortex-store-gateway
  namespace: cortex-components
  labels:
    helm.sh/chart: cortex-2.4.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/version: "v1.17.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: store-gateway
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/component: store-gateway
---
# Source: cortex/templates/svc-memberlist-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: cortex-memberlist
  namespace: cortex-components
  labels:
    helm.sh/chart: cortex-2.4.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/version: "v1.17.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 7946
      protocol: TCP
      appProtocol: tcp
      name: gossip
      targetPort: gossip
  selector:
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/part-of: memberlist
---
# Source: cortex/templates/alertmanager/alertmanager-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cortex-alertmanager
  namespace: cortex-components
  labels:
    helm.sh/chart: cortex-2.4.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/version: "v1.17.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: alertmanager
    app.kubernetes.io/part-of: memberlist
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: cortex
      app.kubernetes.io/instance: cortex
      app.kubernetes.io/component: alertmanager
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: cortex-2.4.0
        app.kubernetes.io/name: cortex
        app.kubernetes.io/instance: cortex
        app.kubernetes.io/version: "v1.17.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: alertmanager
        app.kubernetes.io/part-of: memberlist
      annotations:
        checksum/config: 312de7483393c5dc88b9b2754163500165d456ec8fea4dc72b20ee614171c2bc
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: cortex
      initContainers:
        []
      containers:
        - name: alertmanager
          image: "quay.io/cortexproject/cortex:v1.17.1"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=alertmanager"
            - "-config.file=/etc/cortex/cortex.yaml"
          volumeMounts:
            - name: config
              mountPath: /etc/cortex
            - name: runtime-config
              mountPath: /etc/cortex-runtime-config
            - name: storage
              mountPath: "/data"
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: gossip
              containerPort: 7946
              protocol: TCP
          startupProbe:
            failureThreshold: 10
            httpGet:
              path: /ready
              port: http-metrics
          livenessProbe:
            httpGet:
              path: /ready
              port: http-metrics
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
          resources:
            {}
          securityContext:
            readOnlyRootFilesystem: true
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      terminationGracePeriodSeconds: 60
      volumes:
        - name: config
          secret:
            secretName: cortex
        - name: runtime-config
          configMap:
            name: cortex-runtime-config
        - name: storage
          emptyDir: {}
---
# Source: cortex/templates/distributor/distributor-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cortex-distributor
  namespace: cortex-components
  labels:
    helm.sh/chart: cortex-2.4.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/version: "v1.17.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: distributor
    app.kubernetes.io/part-of: memberlist
  annotations:
    {}
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: cortex
      app.kubernetes.io/instance: cortex
      app.kubernetes.io/component: distributor
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: cortex-2.4.0
        app.kubernetes.io/name: cortex
        app.kubernetes.io/instance: cortex
        app.kubernetes.io/version: "v1.17.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: distributor
        app.kubernetes.io/part-of: memberlist
      annotations:
        checksum/config: 312de7483393c5dc88b9b2754163500165d456ec8fea4dc72b20ee614171c2bc
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: cortex
      initContainers:
        []
      containers:
        - name: distributor
          image: "quay.io/cortexproject/cortex:v1.17.1"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=distributor"
            - "-config.file=/etc/cortex/cortex.yaml"
          volumeMounts:
            - name: config
              mountPath: /etc/cortex
            - name: runtime-config
              mountPath: /etc/cortex-runtime-config
            - name: storage
              mountPath: "/data"
              subPath: 
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: gossip
              containerPort: 7946
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
          startupProbe:
            failureThreshold: 10
            httpGet:
              path: /ready
              port: http-metrics
          livenessProbe:
            httpGet:
              path: /ready
              port: http-metrics
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
          resources:
            {}
          securityContext:
            readOnlyRootFilesystem: true
      nodeSelector:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - distributor
              topologyKey: kubernetes.io/hostname
            weight: 100
      tolerations:
        []
      terminationGracePeriodSeconds: 60
      volumes:
        - name: config
          secret:
            secretName: cortex
        - name: runtime-config
          configMap:
            name: cortex-runtime-config
        - name: storage
          emptyDir: {}
---
# Source: cortex/templates/ingester/ingester-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cortex-ingester
  namespace: cortex-components
  labels:
    helm.sh/chart: cortex-2.4.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/version: "v1.17.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: ingester
    app.kubernetes.io/part-of: memberlist
  annotations:
    {}
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: cortex
      app.kubernetes.io/instance: cortex
      app.kubernetes.io/component: ingester
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: cortex-2.4.0
        app.kubernetes.io/name: cortex
        app.kubernetes.io/instance: cortex
        app.kubernetes.io/version: "v1.17.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: ingester
        app.kubernetes.io/part-of: memberlist
      annotations:
        checksum/config: 312de7483393c5dc88b9b2754163500165d456ec8fea4dc72b20ee614171c2bc
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: cortex
      initContainers:
        []
      containers:
        - name: ingester
          image: "quay.io/cortexproject/cortex:v1.17.1"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=ingester"
            - "-config.file=/etc/cortex/cortex.yaml"
            
          volumeMounts:
            - name: config
              mountPath: /etc/cortex
            - name: runtime-config
              mountPath: /etc/cortex-runtime-config
            - name: storage
              mountPath: "/data"
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: gossip
              containerPort: 7946
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
          resources:
            {}
          securityContext:
            readOnlyRootFilesystem: true
          env:
          lifecycle:
            preStop:
              httpGet:
                path: /ingester/shutdown
                port: http-metrics
      nodeSelector:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - ingester
              topologyKey: kubernetes.io/hostname
            weight: 100
      tolerations:
        []
      terminationGracePeriodSeconds: 240
      volumes:
        - name: config
          secret:
            secretName: cortex
        - name: runtime-config
          configMap:
            name: cortex-runtime-config
        - name: storage
          emptyDir: {}
---
# Source: cortex/templates/nginx/nginx-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cortex-nginx
  namespace: cortex-components
  labels:
    helm.sh/chart: cortex-2.4.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/version: "v1.17.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: nginx
  annotations:
    {}
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: cortex
      app.kubernetes.io/instance: cortex
      app.kubernetes.io/component: nginx
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: cortex-2.4.0
        app.kubernetes.io/name: cortex
        app.kubernetes.io/instance: cortex
        app.kubernetes.io/version: "v1.17.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: nginx
      annotations:
        checksum/config: 3c0c5e60d2120052161527355bd24ac4130e78318b92c002259531dc4ede1257
    spec:
      serviceAccountName: cortex
      initContainers:
        []
      containers:
        - name: nginx
          image: "nginx:1.23"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: config
              mountPath: /etc/nginx
          ports:
            - name: http-metrics
              containerPort: 80
              protocol: TCP
          startupProbe:
            failureThreshold: 10
            httpGet:
              path: /healthz
              port: http-metrics
          livenessProbe:
            httpGet:
              path: /healthz
              port: http-metrics
          readinessProbe:
            httpGet:
              path: /healthz
              port: http-metrics
          resources:
            {}
          securityContext:
            readOnlyRootFilesystem: false
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      terminationGracePeriodSeconds: 10
      volumes:
        - name: config
          configMap:
            name: cortex-nginx
---
# Source: cortex/templates/querier/querier-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cortex-querier
  namespace: cortex-components
  labels:
    helm.sh/chart: cortex-2.4.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/version: "v1.17.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: querier
  annotations:
    {}
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: cortex
      app.kubernetes.io/instance: cortex
      app.kubernetes.io/component: querier
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: cortex-2.4.0
        app.kubernetes.io/name: cortex
        app.kubernetes.io/instance: cortex
        app.kubernetes.io/version: "v1.17.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: querier
      annotations:
        checksum/config: 312de7483393c5dc88b9b2754163500165d456ec8fea4dc72b20ee614171c2bc
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: cortex
      initContainers:
        []
      containers:
        - name: querier
          image: "quay.io/cortexproject/cortex:v1.17.1"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=querier"
            - "-config.file=/etc/cortex/cortex.yaml"
            - "-querier.frontend-address=cortex-query-frontend-headless.cortex-components.svc.cluster.local:9095"
            
          volumeMounts:
            - name: config
              mountPath: /etc/cortex
            - name: runtime-config
              mountPath: /etc/cortex-runtime-config
            - name: storage
              mountPath: "/data"
              subPath: 
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
          startupProbe:
            failureThreshold: 10
            httpGet:
              path: /ready
              port: http-metrics
          livenessProbe:
            httpGet:
              path: /ready
              port: http-metrics
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
          resources:
            {}
          securityContext:
            readOnlyRootFilesystem: true
          env:
      nodeSelector:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - querier
              topologyKey: kubernetes.io/hostname
            weight: 100
      tolerations:
        []
      terminationGracePeriodSeconds: 180
      volumes:
        - name: config
          secret:
            secretName: cortex
        - name: runtime-config
          configMap:
            name: cortex-runtime-config
        - name: storage
          emptyDir: {}
---
# Source: cortex/templates/query-frontend/query-frontend-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cortex-query-frontend
  namespace: cortex-components
  labels:
    helm.sh/chart: cortex-2.4.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/version: "v1.17.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: query-frontend
  annotations:
    {}
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: cortex
      app.kubernetes.io/instance: cortex
      app.kubernetes.io/component: query-frontend
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: cortex-2.4.0
        app.kubernetes.io/name: cortex
        app.kubernetes.io/instance: cortex
        app.kubernetes.io/version: "v1.17.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: query-frontend
      annotations:
        checksum/config: 312de7483393c5dc88b9b2754163500165d456ec8fea4dc72b20ee614171c2bc
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: cortex
      initContainers:
        []
      containers:
        - name: query-frontend
          image: "quay.io/cortexproject/cortex:v1.17.1"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=query-frontend"
            - "-config.file=/etc/cortex/cortex.yaml"
            
          volumeMounts:
            - name: config
              mountPath: /etc/cortex
            - name: runtime-config
              mountPath: /etc/cortex-runtime-config
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
          startupProbe:
            failureThreshold: 10
            httpGet:
              path: /ready
              port: http-metrics
          livenessProbe:
            httpGet:
              path: /ready
              port: http-metrics
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
          resources:
            {}
          securityContext:
            readOnlyRootFilesystem: true
      nodeSelector:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - query-frontend
              topologyKey: kubernetes.io/hostname
            weight: 100
      tolerations:
        []
      terminationGracePeriodSeconds: 180
      volumes:
        - name: config
          secret:
            secretName: cortex
        - name: runtime-config
          configMap:
            name: cortex-runtime-config
---
# Source: cortex/templates/ruler/ruler-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cortex-ruler
  namespace: cortex-components
  labels:
    helm.sh/chart: cortex-2.4.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/version: "v1.17.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: ruler
    app.kubernetes.io/part-of: memberlist
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: cortex
      app.kubernetes.io/instance: cortex
      app.kubernetes.io/component: ruler
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: cortex-2.4.0
        app.kubernetes.io/name: cortex
        app.kubernetes.io/instance: cortex
        app.kubernetes.io/version: "v1.17.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: ruler
        app.kubernetes.io/part-of: memberlist
      annotations:
        checksum/config: 312de7483393c5dc88b9b2754163500165d456ec8fea4dc72b20ee614171c2bc
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: cortex
      initContainers:
        []
      containers:
        - name: rules
          image: "quay.io/cortexproject/cortex:v1.17.1"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=ruler"
            - "-config.file=/etc/cortex/cortex.yaml"
            - "-ruler.alertmanager-url=http://cortex-alertmanager.cortex-components.svc.cluster.local:8080/api/prom/alertmanager/"
            
          volumeMounts:
            - name: config
              mountPath: /etc/cortex
            - name: runtime-config
              mountPath: /etc/cortex-runtime-config
            - name: storage
              mountPath: /data
            - name: tmp
              mountPath: /rules
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: gossip
              containerPort: 7946
              protocol: TCP
          startupProbe:
            failureThreshold: 10
            httpGet:
              path: /ready
              port: http-metrics
          livenessProbe:
            httpGet:
              path: /ready
              port: http-metrics
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
          resources:
            {}
          securityContext:
            readOnlyRootFilesystem: true
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      terminationGracePeriodSeconds: 180
      volumes:
        - name: config
          secret:
            secretName: cortex
        - name: runtime-config
          configMap:
            name: cortex-runtime-config
        - name: tmp
          emptyDir: {}
        - name: storage
          emptyDir: {}
---
# Source: cortex/templates/compactor/compactor-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cortex-compactor
  namespace: cortex-components
  labels:
    helm.sh/chart: cortex-2.4.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/version: "v1.17.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: compactor
    app.kubernetes.io/part-of: memberlist
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: cortex
      app.kubernetes.io/instance: cortex
      app.kubernetes.io/component: compactor
  updateStrategy:
    type: RollingUpdate
  serviceName: cortex-compactor
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        accessModes:
          
          - ReadWriteOnce
        resources:
          requests:
            storage: "2Gi"
  template:
    metadata:
      labels:
        helm.sh/chart: cortex-2.4.0
        app.kubernetes.io/name: cortex
        app.kubernetes.io/instance: cortex
        app.kubernetes.io/version: "v1.17.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: compactor
        app.kubernetes.io/part-of: memberlist
      annotations:
        checksum/config: 312de7483393c5dc88b9b2754163500165d456ec8fea4dc72b20ee614171c2bc
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: cortex
      initContainers:
        []
      nodeSelector:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - compactor
              topologyKey: kubernetes.io/hostname
            weight: 100
      tolerations:
        []
      terminationGracePeriodSeconds: 240
      volumes:
        - name: config
          secret:
            secretName: cortex
        - name: runtime-config
          configMap:
            name: cortex-runtime-config
      containers:
        - name: compactor
          image: "quay.io/cortexproject/cortex:v1.17.1"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=compactor"
            - "-config.file=/etc/cortex/cortex.yaml"
            
          volumeMounts:
            - name: config
              mountPath: /etc/cortex
            - name: runtime-config
              mountPath: /etc/cortex-runtime-config
            - name: storage
              mountPath: "/data"
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: gossip
              containerPort: 7946
              protocol: TCP
          startupProbe:
            failureThreshold: 60
            httpGet:
              path: /ready
              port: http-metrics
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
          resources:
            {}
          securityContext:
            readOnlyRootFilesystem: true
---
# Source: cortex/templates/store-gateway/store-gateway-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cortex-store-gateway
  namespace: cortex-components
  labels:
    helm.sh/chart: cortex-2.4.0
    app.kubernetes.io/name: cortex
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/version: "v1.17.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: store-gateway
    app.kubernetes.io/part-of: memberlist
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: cortex
      app.kubernetes.io/instance: cortex
      app.kubernetes.io/component: store-gateway
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: "OrderedReady"
  serviceName: cortex-store-gateway-headless
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "2Gi"
  template:
    metadata:
      labels:
        helm.sh/chart: cortex-2.4.0
        app.kubernetes.io/name: cortex
        app.kubernetes.io/instance: cortex
        app.kubernetes.io/version: "v1.17.1"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: store-gateway
        app.kubernetes.io/part-of: memberlist
      annotations:
        checksum/config: 312de7483393c5dc88b9b2754163500165d456ec8fea4dc72b20ee614171c2bc
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: cortex
      initContainers:
        []
      nodeSelector:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - store-gateway
              topologyKey: kubernetes.io/hostname
            weight: 100
      tolerations:
        []
      terminationGracePeriodSeconds: 240
      volumes:
        - name: config
          secret:
            secretName: cortex
        - name: runtime-config
          configMap:
            name: cortex-runtime-config
      containers:
        - name: store-gateway
          image: "quay.io/cortexproject/cortex:v1.17.1"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=store-gateway"
            - "-config.file=/etc/cortex/cortex.yaml"
            
          volumeMounts:
            - name: config
              mountPath: /etc/cortex
            - name: runtime-config
              mountPath: /etc/cortex-runtime-config
            - name: storage
              mountPath: "/data"
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: gossip
              containerPort: 7946
              protocol: TCP
          startupProbe:
            failureThreshold: 60
            httpGet:
              path: /ready
              port: http-metrics
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
          resources:
            {}
          securityContext:
            readOnlyRootFilesystem: true
